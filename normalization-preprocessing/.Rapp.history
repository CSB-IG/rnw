dd
options("contrasts")
model.matrix(~ a + b, dd)
gl(3,4)
model.matrix(~ a + b, dd, contrasts = list(a = "contr.sum"))
list(a = "contr.sum")
library(ssmarina)
?ssmarina
library(ssmarina)
?ttestNull
?sign
sign(pi)
?sign
sign(-2:3)
library(bcellExample)#
data(bcellExample)
naiveBcell <- which(colnames(dset) %in% normalSamples[["N"]])#
GCBcell <- which(colnames(dset) %in% c(normalSamples[["CB"]], normalSamples[["CC"]]))
signature <- rowTtest(dset[, GCBcell], dset[, naiveBcell])
signature
str(signature)
signature <- (qnorm(signature$p.value/2, lower.tail=F) * sign(signature$statistic))[, 1]
str(signature)
nullmodel <- ttestNull(dset[, GCBcell], dset[, naiveBcell], per=1000, repos=T)
str(nullmodel)
library(ssmarina)#
library(bcellExample)#
data(bcellExample)
str(regulon)
Sys.setenv(http_proxy="http://192.168.105.78:8888")
library(ssmarina)
?argparser
??argparser
n_samples <- 880
n_samples * 4
(n_samples*4)
install.packages("http://files.figshare.com/1217799/ssmarina_1.01.tar.gz",#
                 repos=NULL, method="libcurl")
install.packages("http://files.figshare.com/1217799/ssmarina_1.01.tar.gz",#
                 repos=NULL)
library(ssmarina)
marina
library(ssmarina)
Sys.setenv(http_proxy="http://192.168.105.78:8888")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(frma)
browseVignettes()
source("http://bioconductor.org/biocLite.R")
biocLite("hgu133afrmavecs")
library(frma)
library(frmaExampleData)
biocLite("frmaExampleData")
library(frmaExampleData)
data(AffyBatchExample)
ls()
class(AffyBatchExample)
str(AffyBatchExample)
AffyBatchExample
?fmra
?frma
object <- frma(AffyBatchExample)
load(hgu133afrmavecs)
source("http://bioconductor.org/biocLite.R")
biocLite("frmaExampleData")
biocLite(hgu133afrmavecs)
biocLite("hgu133afrmavecs")
batchQC
BatchQC
source("http://bioconductor.org/biocLite.R")
biocLite(c('MCMCpack', 'limma', 'preprocessCore', 'sva', 'devtools', 'corpcor', 'matrixStats', 'shiny', 'ggvis', 'd3heatmap', 'reshape2'))
require(devtools)
install_github("mani2012/BatchQC", build_vignettes=TRUE)
install_github('Rapporter/pander')
require(BatchQC)
vignette('BatchQCIntro', package='BatchQC')
library(sva)
library(bladderbatch)
source("http://bioconductor.org/biocLite.R")
biocLite("bladderbatch")
library(bladderbatch)
data(bladderdata)
ls()
str(bladderEset)
bladderEset
Sys.setenv(http_proxy="http://192.168.105.78:8888")
install.packages("~/OneDrive/Doctorado/Ana패lisis/RUVnormalize/ruv.extras_0.9.4.tar.gz", repos = NULL, type="source")
install.packages("~/OneDrive/Doctorado/Ana패lisis/RUVnormalize/ruv.htmllatex_0.9.4.tar.gz", repos = NULL, type="source")
install.packages("~/OneDrive/Doctorado/Ana패lisis/RUVnormalize/ruv.extras_0.9.4.tar.gz", repos = NULL, type="source")
library(ruv)
library(ruv.extras)
library(ruv.htmllatex)
library(ruv.extras)
library(ruv.data.gender.sm)
install.packages("~/OneDrive/Doctorado/Ana패lisis/RUVnormalize/ruv.data.gender.sm_0.9.3.tar.gz", repos = NULL, type="source")
library(ruv.data.gender.sm)
data(gender.sm)
ls()
gender.sm
str(gender.sm)
class(gender.sm)
ruv_starter_analysis(gender.sm$Y, gender.sm$X, gender.sm$hkctl)
ls()
ruv_starter_analysis(gender.sm$Y, gender.sm$X, gender.sm$hkctl, #
                     pctl=gender.sm$pctl, geneinfo=gender.sm$geneinfo, kset=c(1,5,10),#
                     outdir="gender1", webtitle="Gender Example 1")
library(ssmarina)
Sys.setenv(http_proxy="http://192.168.105.78:8888")
ls()
Sys.setenv(http_proxy="http://192.168.105.78:8888")
3+5
3 + 5 -> a
a
a +7
library(swirl)
swirl()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create(mytest.R)
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.reame("mytest.R","mytest2.R")
file.remae("mytest.R","mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive = T)
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir2/" recursive = TRUE)
unlink("testdir2" recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setdw(old.dir)
setwd(old.dir)
unlink("testdir/",recursive=TRUE)
unlink("testdir",recursive=TRUE)
info()
bye()
cars
class(cars)
dim(cars)
mean(cars[,2])
which(cars[,2]==85)
foo = seq(1, 100, by=2)
foo
foo.squared = NULL
fname <- "
""
fname <- c("/Users/hachepunto/red.adj")
fname
tmp <- readLines(fname)
tmp
pos <- grep(">", tmp)
length(pos)
tmp <- tmp[-pos]
tmp <- strsplit(tmp, "\t")
nom <- sapply(tmp, function(x) x[1])
nom
tmp <- lapply(tmp, function(x) matrix(x[-1], length(x[-1])/2, 2, byrow=T))
dim(tmp)
tmp
head(tmp)
class(tmp)
str(tmp)
aracne <- data.frame(tf=rep(nom, sapply(tmp, nrow)), target=unlist(lapply(tmp, function(x) x[, 1]), use.names=F), mi=as.numeric(unlist(lapply(tmp, function(x) x[, 2]), use.names=F)))
class(aracne)
str(aracne)
aracne$tf
ls()
str(aracne)
aracne$tf$1
aracne$tf[1]
aracne$target[1]
aracne$mi[1]
Sys.getenv('R_LIBS')
cat
Sys.setenv(http_proxy="http://192.168.105.78:8888")
library(igraph)
power.law.fit()
power.law.fit
Sys.setenv(http_proxy="http://192.168.105.78:8888")
suppressPackageStartupMessages(library(sva))
pheno <- read.table(~/GitHub/rnw/normalization-preprocessing/proof_set/pheno_sample.txt, header = TRUE, sep = "\t", row.names=1)
pheno <- read.table("~/GitHub/rnw/normalization-preprocessing/proof_set/pheno_sample.txt", header = TRUE, sep = "\t", row.names=1)
pheno
options("contrasts")
modcombat = model.matrix(~ outcome, pheno, contrasts = list(outcome = "contr.sum"))
batch <- pheno$batch
batch
ls()
Sys.setenv(http_proxy="http://192.168.105.78:8888")
dist <- read.table("~/Desktop/dist_hugo.txt")
dist <- read.table("~/Desktop/dist_hugo.txt", header=TRUE)
dist <- read.table("~/Desktop/dist_hugo.txt", header=TRUE, row.names= 1)
dist
head(dist)
dist <- read.table("~/Desktop/dist_hugo.txt", header=F, row.names= 1)
head(dist)
library(igrap)
library(igraph)
power.law.fit(dist)
class(dist)
dist<-dist[[V2]]
dist<-dist[V2]
dist<-dist[,1]
class(dist)
power.law.fit(dist)
plot(dist)
degree(dist)
degree(power.law.fit(dist))
d <- density(dist)
d
plot(d)
gaus <- rnorm(1000)
x = 1:1000
power <- x^4
class(power)
class(gaus)
power.law.fit(gaus)
power.law.fit(power)
??power.law.fit
gaus<-sort(gaus)
power.law.fit(gaus)
gaus
gaus <- rnorm(1000,18,1)
gaus<-sort(gaus)
power.law.fit(gaus)
power.law.fit(power)
power <- x^-4
power.law.fit(power)
power <- x^4
power.law.fit(power)
power <- x^-2.5
power.law.fit(power)
power.law.fit(x^-1)
power.law.fit(x^-2)
power.law.fit(x^-3)
power.law.fit(x^-300)
power.law.fit(x^-725)
suppressPackageStartupMessages(library(argparse))#
suppressPackageStartupMessages(library(affy))
affybatch <- ReadAffy(celfile.path="proof_set")
suppressPackageStartupMessages(library(limma))#
suppressPackageStartupMessages(library(frma))
oldw <- getOption("warn")
options(warn = -1) # silencing unnecessary warning message
frmaData <- frma(affybatch, background="rma",#
                            normalize="quantile",#
                            summarize="robust_weighted_average")
options("contrasts")
report = file.path(dirname(args$matrix), paste(basename(args$matrix),".pdf",sep=""))
report = file.path(dirname("matrix.txt"), paste(basename("matrix.txt"),".pdf",sep=""))
report
basename("matrix.txt")
?basename
report = file.path(dirname("matrix.txt"), paste(sub("^([^.]*).*", "\\1", basename("matrix.txt")),".pdf",sep=""))
report
Sys.setenv(http_proxy="http://192.168.105.78:8888")
